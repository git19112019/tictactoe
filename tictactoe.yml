tic_tac_toe_game:
  description: "Full Tic Tac Toe game design with pseudocode, Python implementation, flowchart, and JSON state."

  pseudocode:
    description: "Step-by-step logic for Tic Tac Toe, including win, draw, and restart."
    steps:
      - Setup:
          actions:
            - Initialize 3x3 board (empty)
            - Set current player to 'X'
            - Set game_over to False
            - Set winner to None
            - Initialize move_history as empty list
      - Main Game Loop (until game_over is True):
          actions:
            - Display current board
            - Prompt current player for action:
                options:
                  - Make Move
                  - Restart Game
                  - Exit Game
            - If Make Move:
                - Parse and validate coordinates
                - If move is valid:
                    - Update board
                    - Append to move history
                    - Check for win → if win: set winner and game_over
                    - Else check for draw → if draw: set game_over
                    - If no win/draw: switch player
                - Else: notify invalid move, retry
            - If Restart Game:
                - Reset board, player, and variables
            - If Exit Game:
                - Set game_over = True
      - After Game Ends:
          actions:
            - Display final board
            - Announce winner or draw
            - Ask to play again → if yes: restart, else: exit

  python_code:
    description: "Python implementation of Tic Tac Toe."
    snippet: |
      class TicTacToe:
          SIZE = 3

          def __init__(self):
              self.board = [[' ' for _ in range(self.SIZE)] for _ in range(self.SIZE)]
              self.current_player = 'X'
              self.game_over = False
              self.winner = None
              self.move_history = []

          def display_board(self):
              print("\nCurrent Board:")
              for i, row in enumerate(self.board):
                  print(' | '.join(row))
                  if i < self.SIZE - 1:
                      print('-' * 5)

          def is_valid_move(self, x, y):
              return 0 <= x < self.SIZE and 0 <= y < self.SIZE and self.board[x][y] == ' '

          def make_move(self, x, y):
              if self.is_valid_move(x, y):
                  self.board[x][y] = self.current_player
                  self.move_history.append((x, y))
                  return True
              return False

          def switch_player(self):
              self.current_player = 'O' if self.current_player == 'X' else 'X'

          def check_win(self):
              lines = []

              for i in range(self.SIZE):
                  lines.append(self.board[i])
                  lines.append([self.board[j][i] for j in range(self.SIZE)])

              lines.append([self.board[i][i] for i in range(self.SIZE)])
              lines.append([self.board[i][self.SIZE - i - 1] for i in range(self.SIZE)])

              for line in lines:
                  if all(cell == self.current_player for cell in line):
                      self.winner = self.current_player
                      self.game_over = True
                      return True
              return False

          def is_draw(self):
              if all(cell != ' ' for row in self.board for cell in row):
                  self.game_over = True
                  return True
              return False

          def restart_game(self):
              self.__init__()
              print("Game restarted.\n")

          def process_turn(self):
              self.display_board()
              print(f"Player {self.current_player}'s turn.")
              move_input = input("Enter row and column (e.g., 1 2), or 'r' to restart, 'q' to quit: ").strip().lower()

              if move_input == 'r':
                  self.restart_game()
                  return 'restart'
              elif move_input == 'q':
                  self.game_over = True
                  return 'quit'

              try:
                  x, y = map(int, move_input.split())
                  x -= 1
                  y -= 1
              except ValueError:
                  print("❌ Invalid input format.")
                  return

              if self.make_move(x, y):
                  if self.check_win():
                      self.display_board()
                      print(f"🎉 Player {self.current_player} wins!")
                  elif self.is_draw():
                      self.display_board()
                      print("🤝 It's a draw!")
                  else:
                      self.switch_player()
              else:
                  print("❌ Invalid move. Try again.")

          def play(self):
              while True:
                  while not self.game_over:
                      self.process_turn()

                  again = input("Play again? (y/n): ").strip().lower()
                  if again.startswith('y'):
                      self.restart_game()
                  else:
                      print("👋 Thanks for playing!")
                      break

      if __name__ == "__main__":
          game = TicTacToe()
          game.play()

  flowchart:
    description: "Game flow logic for Tic Tac Toe in Mermaid.js syntax."
    diagram: |
      graph TD
        Start[Start Game] --> Init[Initialize Board and Variables]
        Init --> GameLoop[Game Loop (Until Game Over)]

        GameLoop --> Display[Display Board]
        Display --> PlayerAction{Player Action}

        PlayerAction -- Move --> ValidateMove[Validate Move]
        ValidateMove -- Invalid --> GameLoop
        ValidateMove -- Valid --> Update[Update Board and Save Move]
        Update --> CheckWin[Check Win?]

        CheckWin -- Yes --> Win[Announce Winner]
        CheckWin -- No --> CheckDraw[Check Draw?]
        CheckDraw -- Yes --> Draw[Announce Draw]
        CheckDraw -- No --> Switch[Switch Player] --> GameLoop

        PlayerAction -- Restart --> Restart[Restart Game] --> Init
        PlayerAction -- Quit --> End[Exit Game]

        Win --> PlayAgain[Play Again?]
        Draw --> PlayAgain
        PlayAgain -- Yes --> Init
        PlayAgain -- No --> End

  json_example:
    description: "Example serialized game state after a few moves."
    state: |
      {
        "board": [
          ["X", "O", " "],
          [" ", "X", " "],
          ["O", " ", "X"]
        ],
        "current_player": "O",
        "game_over": false,
        "winner": null,
        "move_history": [
          [0, 0],
          [0, 1],
          [1, 1],
          [2, 0],
          [2, 2]
        ]
      }
